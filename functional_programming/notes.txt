INTRODUCTION

Functional programming is a style of programming that (as the name suggests) is based around functions.
A key part of functional programming is higher-order functions. Higher-order functions take other functions as arguments, or return them as results.

Example:
CODE PLAYGROUND: PY
def apply_twice(func, arg):
   return func(func(arg))

def add_five(x):
   return x + 5

print(apply_twice(add_five, 10))
Click to run
The function apply_twice takes another function as its argument, and calls it twice inside its body.


Pure Functions
Functional programming seeks to use pure functions. Pure functions have no side effects, and return a value that depends only on their arguments.
This is how functions in math work: for example, the cos(x) will, for the same value of x, always return the same result.
Below are examples of pure and impure functions.

Pure function:
def pure_function(x, y):
  temp = x + 2*y
  return temp / (2*x + y)
PY
Impure function:
some_list = []

def impure(arg):
  some_list.append(arg)
PY
The function above is not pure, because it changed the state of some_list.

Pure Functions
Using pure functions has both advantages and disadvantages.
Pure functions are:
- easier to reason about and test.
- more efficient. Once the function has been evaluated for an input, the result can be stored and referred to the next time the function of that input is needed, reducing the number of times the function is called. This is called memoization.
- easier to run in parallel.

Pure functions are more difficult to write in some situations.

Lambdas
Creating a function normally (using def) assigns it to a variable with its name automatically.
Python allows us to create functions on-the-fly, provided that they are created using lambda syntax.

This approach is most commonly used when passing a simple function as an argument to another function. The syntax is shown in the next example and consists of the lambda keyword followed by a list of arguments, a colon, and the expression to evaluate and return.

def my_func(f, arg):
  return f(arg)

my_func(lambda x: 2*x*x, 5)
PY
Functions created using the lambda syntax are known as anonymous.

Lambdas
Lambda functions aren't as powerful as named functions.
They can only do things that require a single expression -- usually equivalent to a single line of code.

Example:
CODE PLAYGROUND: PY
#named function
def polynomial(x):
    return x**2 + 5*x + 4
print(polynomial(-4))

#lambda
print((lambda x: x**2 + 5*x + 4) (-4))
Click to run
In the code above, we created an anonymous function on the fly and called it with an argument.


map
The built-in functions map and filter are very useful higher-order functions that operate on lists (or similar objects called iterables).
The function map takes a function and an iterable as arguments, and returns a new iterable with the function applied to each argument.

Example:
CODE PLAYGROUND: PY
def add_five(x):
  return x + 5

nums = [11, 22, 33, 44, 55]
result = list(map(add_five, nums))
print(result)
Click to run
We could have achieved the same result more easily by using lambda syntax.

CODE PLAYGROUND: PY
nums = [11, 22, 33, 44, 55]

result = list(map(lambda x: x+5, nums))
print(result)
Click to run
To convert the result into a list, we used list explicitly.


filter
The function filter filters an iterable by leaving only the items that match a condition (also called a predicate).

Example:
CODE PLAYGROUND: PY
nums = [11, 22, 33, 44, 55]
res = list(filter(lambda x: x%2==0, nums))
print(res)
Click to run
Like map, the result has to be explicitly converted to a list if you want to print it.

Generators
Generators are a type of iterable, like lists or tuples.
Unlike lists, they don't allow indexing with arbitrary indices, but they can still be iterated through with for loops.
They can be created using functions and the yield statement.

Example:
CODE PLAYGROUND: PY
def countdown():
  i=5
  while i > 0:
    yield i
    i -= 1
    
for i in countdown():
  print(i)
Click to run
The yield statement is used to define a generator, replacing the return of a function to provide a result to its caller without destroying local variables.

Generators
Due to the fact that they yield one item at a time, generators don't have the memory restrictions of lists.
In fact, they can be infinite!

def infinite_sevens():
  while True:
    yield 7
        
for i in infinite_sevens():
  print(i)
PY
Result:

>>>
7
7
7
7
7
7
7
...
In short, generators allow you to de

Generators
Finite generators can be converted into lists by passing them as arguments to the list function.

CODE PLAYGROUND: PY
def numbers(x):
  for i in range(x):
    if i % 2 == 0:
      yield i

print(list(numbers(11)))
Click to run
Using generators results in improved performance, which is the result of the lazy (on demand) generation of values, which translates to lower memory usage. Furthermore, we do not need to wait until all the elements have been generated before we start to use them.



Decorators
Decorators provide a way to modify functions using other functions.
This is ideal when you need to extend the functionality of functions that you don't want to modify.

Example:
CODE PLAYGROUND: PY
def decor(func):
  def wrap():
    print("============")
    func()
    print("============")
  return wrap

def print_text():
  print("Hello world!")

decorated = decor(print_text)
decorated()
Click to run
We defined a function named decor that has a single parameter func. Inside decor, we defined a nested function named wrap. The wrap function will print a string, then call func(), and print another string. The decor function returns the wrap function as its result.
We could say that the variable decorated is a decorated version of print_text -- it's print_text plus something.
In fact, if we wrote a useful decorator we might want to replace print_text with the decorated version altogether so we always got our "plus something" version of print_text.
This is done by re-assigning the variable that contains our function:

CODE PLAYGROUND: PY
print_text = decor(print_text)
print_text()
Click to run
Now print_text corresponds to our decorated version.

Decorators
In our previous example, we decorated our function by replacing the variable containing the function with a wrapped version.

CODE PLAYGROUND: PY
def print_text():
  print("Hello world!")

print_text = decor(print_text)
Click to run
This pattern can be used at any time, to wrap any function.
Python provides support to wrap a function in a decorator by pre-pending the function definition with a decorator name and the @ symbol.
If we are defining a function we can "decorate" it with the @ symbol like:

CODE PLAYGROUND: PY
@decor
def print_text():
  print("Hello world!")
Click to run
This will have the same result as the above code.

A single function can have multiple decorators.


Recursion
Recursion is a very important concept in functional programming.
The fundamental part of recursion is self-reference -- functions calling themselves. It is used to solve problems that can be broken up into easier sub-problems of the same type.

A classic example of a function that is implemented recursively is the factorial function, which finds the product of all positive integers below a specified number.
For example, 5! (5 factorial) is 5 * 4 * 3 * 2 * 1 (120). To implement this recursively, notice that 5! = 5 * 4!, 4! = 4 * 3!, 3! = 3 * 2!, and so on. Generally, n! = n * (n-1)!.
Furthermore, 1! = 1. This is known as the base case, as it can be calculated without performing any more factorials.
Below is a recursive implementation of the factorial function.

CODE PLAYGROUND: PY
def factorial(x):
  if x == 1:
    return 1
  else: 
    return x * factorial(x-1)
    
print(factorial(5))
Click to run
The base case acts as the exit condition of the recursion.
Not adding a base case results in infinite function calls, crashing the program.

Recursion
Recursion can also be indirect. One function can call a second, which calls the first, which calls the second, and so on. This can occur with any number of functions.

Example:
CODE PLAYGROUND: PY
def is_even(x):
  if x == 0:
    return True
  else:
    return is_odd(x-1)

def is_odd(x):
  return not is_even(x)


print(is_odd(17))
print(is_even(23))
Click to run
Run the code and see how it works!


*args
Python allows you to have functions with varying numbers of arguments.
Using *args as a function parameter enables you to pass an arbitrary number of arguments to that function. The arguments are then accessible as the tuple args in the body of the function.

Example:
CODE PLAYGROUND: PY
def function(named_arg, *args):
   print(named_arg)
   print(args)

function(1, 2, 3, 4, 5)
Click to run
The parameter *args must come after the named parameters to a function.
The name args is just a convention; you can choose to use another.

**kwargs
**kwargs (standing for keyword arguments) allows you to handle named arguments that you have not defined in advance.
The keyword arguments return a dictionary in which the keys are the argument names, and the values are the argument values.

Example:
CODE PLAYGROUND: PY
def my_func(x, y=7, *args, **kwargs):
   print(kwargs)

my_func(2, 3, 4, 5, 6, a=7, b=8)
Click to run
a and b are the names of the arguments that we passed to the function call.

The arguments returned by **kwargs are not included in *args.
