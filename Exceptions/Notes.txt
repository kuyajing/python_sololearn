Exceptions
You have already seen exceptions in previous code. They occur when something goes wrong, due to incorrect code or input. When an exception occurs, the program immediately stops.
The following code produces the ZeroDivisionError exception by trying to divide 7 by 0:

CODE PLAYGROUND: PY
num1 = 7
num2 = 0
print(num1/num2)
Click to run
An exception is an event, which occurs during the execution of a program that disrupts the normal flow of the program.

Exceptions
Different exceptions are raised for different reasons.
Common exceptions:
ImportError: an import fails;
IndexError: a list is indexed with an out-of-range number;
NameError: an unknown variable is used;
SyntaxError: the code can't be parsed properly;
TypeError: a function is called on a value of an inappropriate type;
ValueError: a function is called on a value of the correct type, but with an inappropriate value.

Python has several other built-in exceptions, such as ZeroDivisionError and OSError. Third-party libraries also often define their own exceptions.

Exception Handling
When an exception occurs, the program stops executing.
To handle exceptions, and to call code when an exception occurs, you can use a try/except statement.
The try block contains code that might throw an exception. If that exception occurs, the code in the try block stops being executed, and the code in the except block is run. If no error occurs, the code in the except block doesn't run.

For example:
CODE PLAYGROUND: PY
try:
   num1 = 7
   num2 = 0
   print (num1 / num2)
   print("Done calculation")
except ZeroDivisionError:
   print("An error occurred")
   print("due to zero division")
Click to run
As the code produces a ZeroDivisionError exception, the code in the except block is run.

In the code above, the except statement defines the type of exception to handle (in our case, the ZeroDivisionError).

Exception Handling
A try statement can have multiple different except blocks to handle different exceptions.
Multiple exceptions can also be put into a single except block using parentheses, to have the except block handle all of them.

CODE PLAYGROUND: PY
try:
   variable = 10
   print(variable + "hello")
   print(variable / 2)
except ZeroDivisionError:
   print("Divided by zero")
except (ValueError, TypeError):
   print("Error occurred")
Click to run
You can handle as many exceptions in the except statement as you need.

Exception Handling
An except statement without any exception specified will catch all errors. These should be used sparingly, as they can catch unexpected errors and hide programming mistakes.

For example:
CODE PLAYGROUND: PY
try:
   word = "spam"
   print(word / 0)
except:
   print("An error occurred")
Click to run
Exception handling is particularly useful when dealing with user input.


finally
After a try/except statement, a finally block can follow. It will execute after the try/except block, no matter if an exception occurred or not.

CODE PLAYGROUND: PY
try:
   print("Hello")
   print(1 / 0)
except ZeroDivisionError:
   print("Divided by zero")
finally:
   print("This code will run no matter what")
Click to run
The finally block is useful, for example, when working with files and resources: it can be used to make sure files or resources are closed or released regardless of whether an exception occurs.

else
The else statement can also be used with try/except statements.
In this case, the code within it is only executed if no error occurs in the try statement.

Example:
CODE PLAYGROUND: PY
try:
   print(1)
except ZeroDivisionError:
   print(2)
else:
   print(3)

try:
   print(1/0)
except ZeroDivisionError:
   print(4)
else:
   print(5)
Click to run
Run the code and see how it works!

Raising Exceptions
You can throw (or raise) exceptions when some condition occurs.
For example, when you take user input that needs to be in a specific format, you can throw an exception when it does not meet the requirements.
This is done using the raise statement.

CODE PLAYGROUND: PY
num = 102
if num > 100:
  raise ValueError
Click to run

Raising Exceptions
Exceptions can be raised with arguments that give detail about them.

For example:
CODE PLAYGROUND: PY
name = "123"
raise NameError("Invalid name!")
Click to run
This makes it easier for other developers to understand why you raised the exception.